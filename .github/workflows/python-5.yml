name: Python in Github Workflow
#
# python.yml
#
# Run python code in .github/workflows/python.yml
# Make some folders and files in a github repository.
#
# References:
# https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-python
# https://gitea.com/actions/checkout  <-- "Push a commit using the built-in token"
# 
# For github repository: Settings --> Actions --> General --> Workflow permissions --> Check: Read and Write permissions, then Save
# Ian Stewart - 2025-05-08
# Future: https://pypi.org/project/python-git/#description
#
on: 
  #push:
  #  branches: 
  #  -main
  #  -src

  # Run this workflow manually from the Actions --> All Workflows --> "Python in Github Workflow" --> Run workflow.
  # If python.yml is "main" branch.
  workflow_dispatch:
  
jobs:
  build:
  
    # Will have error doing the push if no permissions.
    # Either: Settings --> Actions --> General --> Workflow permissions --> check - "Read and write permissions" and then Save.
    # OR: have "permissions: write-all" in the yml script...
    #permissions: write-all
    # OR: Set individual permissions. "contents: write" may be enough...
    permissions:
      #actions: write #read|write|none
      #attestations: #read|write|none
      #checks: #read|write|none
      contents: write #read|write|none
      #deployments: #read|write|none
      #id-token: #write|none
      #issues: #read|write|none
      #models: #read|none
      #discussions: #read|write|none
      #packages: #read|write|none
      #pages: #read|write|none
      #pull-requests: #read|write|none
      #security-events: #read|write|none
      #statuses: #read|write|none
      
    #permissions: read-all
  
    runs-on: ubuntu-latest
    
    steps:
      - name: Actions Checkout v4
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          #  ['python-version', 'python-version-file', 'cache', 'architecture', 'check-latest', 'token', 
          #   'cache-dependency-path', 'update-environment', 'allow-prereleases', 'freethreaded']
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          #pip install -r requirements.txt
          pip install matplotlib

      - name: Python multi-line code
        shell: python
        run: |
          import os
          import sys
          import subprocess
          import time
          # pip will have downloaded from PyPI and installed matplotlib
          import matplotlib

          filename = "help_info"
          account_name = "irsbugs"
          account_email: "irsbugs@hotmail.com"

          #yaml editor triggers on colon :

          def python_modules():
              # Review the Actions log file to see output from... 
              help("modules")
          
          def get_info(): 
              # Collect information using, sys, os, time, matplotlib
              data_list = []  
              data_list.append("test_info. Created by running python in yml .github/workflows file.\nStart of info...")
              data_list.append("sys.version: " + str(sys.version))                
              data_list.append("test_info. Created by running python in yml .github/workflows file...")
              data_list.append("sys.version: " + str(sys.version))
              data_list.append("sys.version_info: " + str(sys.version_info))
              data_list.append("sys.platform: " + sys.platform)
              data_list.append("sys.path: " + str(sys.path))
              data_list.append("os.getcwd(): " + os.getcwd())
              data_list.append("os.environ['PATH']: " + os.environ['PATH'])
              data_list.append("time.ctime(): " + time.ctime())
              data_list.append("matplotlib._get_version(): " + str(matplotlib._get_version()))
              data_list.append("...end of info.")

              return data_list
              

              #import pkg_resources
              #installed_packages = [(d.project_name, d.version) for d in pkg_resources.working_set]
              #print(installed_packages)
              
              #with open("test_help", "w") as fout:
              #for item in installed_packages:
              #    fout.write(item[0] + " " + str(item[1]) + "\n" )
              
          def add_folder_and_files():
              # Add a folder. In bash "mkdir -p test"         
              folder_list = ["test_a", "test_b",]          
              for folder in folder_list:
                  os.makedirs(folder, exist_ok=True)
                  # Add a file. In bash "touch testfile"
                  file_list = ["testfile1", "testfile2",]
                  for file in file_list:
                      if not os.path.exists(folder + "/" + file):
                          os.mknod(folder + "/" + file)

          def write_to_file(data_list, filename):
              # Write data to a file.
              with open(filename, "w") as fout:
                  for item in data_list:
                    fout.write(item + "\n")

          def perform_push():          
              # Use subprocess to run the git commands to push the updates to github.
              subprocess.run('''
                  git config user.name "irsbugs"
                  git config user.email "irsbugs@hotmail.com"          
                  git add .
                  git commit -m "generated"
                  git push''',
                  shell=True, check=True, executable='/bin/bash')

          def perform_push_1():          
              # Use subprocess to run the git commands to push the updates to github.
              subprocess.run('''
                  git config user.name "{}"
                  git config user.email "{}"          
                  git add .
                  git commit -m "generated"
                  git push'''.format(account_name, account_email),
                  shell=True, check=True, executable='/bin/bash')
              
          if __name__ == "__main__":
              #list_installed_packages()
              python_modules()
              add_folder_and_files()
              
              data_list = get_info()
              write_to_file(data_list, filename)
              #perform_push()
              perform_push_1()
